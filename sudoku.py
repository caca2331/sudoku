from __future__ import print_function

import copy
import time


class Grid:
    """ data structure change:
        - added a few constants
        - uses list instead of dict (self.spots is thus removed)
        - added self.units as an additional constraint
    """

    def __init__(self, problems=None):
        if problems is None:
            return
        self.box_len = int((len(problems) + 0.5) ** 0.25)
        if self.box_len > 4:
            print("only supporting 4*4, 9*9 and 16*16 for now")
            quit(1)
        self.side_len = self.box_len * self.box_len
        self.ttl_box = self.side_len * self.side_len
        self.domains = []
        self.units = []  # first units of rows, then cols, then boxes; thus length is 3 * side_len
        self.peers = []
        self.parse(problems)

    # get copy of self with deepcopy of domain
    def __copy__(self):
        new_grid = Grid()
        new_grid.domains = list([list(v) for v in self.domains])
        new_grid.units = self.units
        new_grid.peers = self.peers
        new_grid.box_len = self.box_len
        new_grid.side_len = self.side_len
        new_grid.ttl_box = self.ttl_box
        return new_grid

    # parse the problem, constrain the existing numbers
    def parse(self, problem):
        # initialize domains
        for i in range(self.ttl_box):
            if self.box_len == 3:
                self.domains.append(range(1, self.side_len + 1) if problem[i] == '.' else [ord(problem[i]) - 48])
            elif self.box_len == 4:
                self.domains.append(range(1, self.side_len + 1) if problem[i] == '.' else [ord(problem[i]) - 47] if
                ord(problem[i]) < 58 else [ord(problem[i]) - 54])

        # initialize units
        self.units = [[] for i in range(3 * self.side_len)]
        for i in range(self.ttl_box):
            r = i // self.side_len
            c = i % self.side_len
            self.units[r].append(i)
            self.units[self.side_len + c].append(i)
            self.units[self.side_len * 2 + r // self.box_len * self.box_len + c // self.box_len].append(i)

        # initialize peers
        for i in range(self.ttl_box):
            r = i // self.side_len
            c = i % self.side_len
            self.peers.append(list(set(self.units[self.side_len * 2 + r // self.box_len * self.box_len +
                                                  c // self.box_len] + self.units[r] + self.units[self.side_len + c])))
            self.peers[i].remove(i)

    # check if all spot has only one value
    def check_finish(self):
        for i in range(self.ttl_box):
            if len(self.domains[i]) != 1:
                return False
        return True

    def display(self):
        for i in range(self.side_len):
            for j in range(self.side_len):
                d = self.domains[i * self.side_len + j]
                if len(d) == 1:
                    if self.box_len == 3:
                        print(d[0], end=' ')
                    elif self.box_len == 4:
                        print(chr(d[0] + 47 if d[0] < 11 else d[0] + 54), end=' ')
                else:
                    print('.', end=' ')
                if j % self.box_len == self.box_len - 1 and j < self.side_len - 1:
                    print("|", end=' ')
            print()
            if i % self.box_len == self.box_len - 1 and i < self.side_len - 1:
                if self.box_len == 3:
                    print("------+-------+------")
                elif self.box_len == 4:
                    print("--------+---------+---------+--------")


class Solver:
    def __init__(self, grid):
        self.grid = grid

    def solve(self):
        problem_time = -time.time()

        # constraint initial condition
        for i in range(self.grid.ttl_box):
            if len(self.grid.domains[i]) == 1:
                if not Solver.consistent(self.grid, i):
                    return False

        result = self.backtrack(self.grid)

        problem_time += time.time()
        print("total_time", problem_time)
        return result

    # depth first search
    def backtrack(self, grid):
        # if finish, update the domain
        if grid.check_finish():
            self.grid.domains = grid.domains
            return True
        # find the spot i with least number of available choices (but more than 1)
        n, i = min((len(grid.domains[i]), i) for i in range(self.grid.ttl_box) if len(grid.domains[i]) > 1)
        # recursively search each possible choice
        for val in grid.domains[i]:
            new_grid = copy.copy(grid)
            new_grid.domains[i] = [val]
            if Solver.consistent(new_grid, i) and self.backtrack(new_grid):
                return True
        # return False if none of which is correct
        return False

    """
    data structure explanation:
    I store the assigment (sigma) and value directly in a copy of grid.
    I also implemented what infer should do in consistent,
    since they have some shared code and I want it to be more efficient.
    """
    # spot should have only one element before calling this function
    @staticmethod
    def consistent(grid, spot):
        value = grid.domains[spot][0]

        # logic 1: If a spot is reduced to one value, then eliminate value from the peers.
        for peer in grid.peers[spot]:
            if value in grid.domains[peer]:
                grid.domains[peer].remove(value)
                if len(grid.domains[peer]) == 0:
                    return False
                elif len(grid.domains[peer]) == 1:
                    if not Solver.consistent(grid, peer):
                        return False

        # logic 2: If a unit is reduced to only one spot for a value, then put the value there.
        for unit in grid.units:
            found = False
            idx = -1
            for i in unit:
                if value in grid.domains[i]:
                    # second time found
                    if found:
                        idx = -1
                        break
                    # first found
                    else:
                        found = True
                        idx = i
            if not found:
                return False
            # if not second time found
            elif idx != -1 and len(grid.domains[idx]) > 1:
                grid.domains[idx] = [value]
                if not Solver.consistent(grid, idx):
                    return False

        return True


if __name__ == '__main__':

    # Solving sudoku
    hard = ['4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......',
            '52...6.........7.13...........4..8..6......5...........418.........3..2...87.....',
            '6.....8.3.4.7.................5.4.7.3..2.....1.6.......2.....5.....8.6......1....',
            '48.3............71.2.......7.5....6....2..8.............1.76...3.....4......5....',
            '....14....3....2...7..........9...3.6.1.............8.2.....1.4....5.6.....7.8...',
            '......52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.',
            '6.2.5.........3.4..........43...8....1....2........7..5..27...........81...6.....',
            '.524.........7.1..............8.2...3.....6...9.5.....1.6.3...........897........',
            '6.2.5.........4.3..........43...8....1....2........7..5..27...........81...6.....',
            '.923.........8.1...........1.7.4...........658.........6.5.2...4.....7.....9.....',
            '6..3.2....5.....1..........7.26............543.........8.15........4.2........7..',
            '.6.5.1.9.1...9..539....7....4.8...7.......5.8.817.5.3.....5.2............76..8...',
            '..5...987.4..5...1..7......2...48....9.1.....6..2.....3..6..2.......9.7.......5..',
            '3.6.7...........518.........1.4.5...7.....6.....2......2.....4.....8.3.....5.....',
            '1.....3.8.7.4..............2.3.1...........958.........5.6...7.....8.2...4.......',
            '6..3.2....4.....1..........7.26............543.........8.15........4.2........7..',
            '....3..9....2....1.5.9..............1.2.8.4.6.8.5...2..75......4.1..6..3.....4.6.',
            '45.....3....8.1....9...........5..9.2..7.....8.........1..4..........7.2...6..8..',
            '.237....68...6.59.9.....7......4.97.3.7.96..2.........5..47.........2....8.......',
            '..84...3....3.....9....157479...8........7..514.....2...9.6...2.5....4......9..56',
            '.98.1....2......6.............3.2.5..84.........6.........4.8.93..5...........1..',
            '..247..58..............1.4.....2...9528.9.4....9...1.........3.3....75..685..2...',
            '4.....8.5.3..........7......2.....6.....5.4......1.......6.3.7.5..2.....1.9......',
            '.2.3......63.....58.......15....9.3....7........1....8.879..26......6.7...6..7..4',
            '1.....7.9.4...72..8.........7..1..6.3.......5.6..4..2.........8..53...7.7.2....46',
            '4.....3.....8.2......7........1...8734.......6........5...6........1.4...82......',
            '.......71.2.8........4.3...7...6..5....2..3..9........6...7.....8....4......5....',
            '6..3.2....4.....8..........7.26............543.........8.15........8.2........7..',
            '.47.8...1............6..7..6....357......5....1..6....28..4.....9.1...4.....2.69.',
            '......8.17..2........5.6......7...5..1....3...8.......5......2..4..8....6...3....',
            '38.6.......9.......2..3.51......5....3..1..6....4......17.5..8.......9.......7.32',
            '...5...........5.697.....2...48.2...25.1...3..8..3.........4.7..13.5..9..2...31..',
            '.2.......3.5.62..9.68...3...5..........64.8.2..47..9....3.....1.....6...17.43....',
            '.8..4....3......1........2...5...4.69..1..8..2...........3.9....6....5.....2.....',
            '..8.9.1...6.5...2......6....3.1.7.5.........9..4...3...5....2...7...3.8.2..7....4',
            '4.....5.8.3..........7......2.....6.....5.8......1.......6.3.7.5..2.....1.8......',
            '1.....3.8.6.4..............2.3.1...........958.........5.6...7.....8.2...4.......',
            '1....6.8..64..........4...7....9.6...7.4..5..5...7.1...5....32.3....8...4........',
            '249.6...3.3....2..8.......5.....6......2......1..4.82..9.5..7....4.....1.7...3...',
            '...8....9.873...4.6..7.......85..97...........43..75.......3....3...145.4....2..1',
            '...5.1....9....8...6.......4.1..........7..9........3.8.....1.5...2..4.....36....',
            '......8.16..2........7.5......6...2..1....3...8.......2......7..3..8....5...4....',
            '.476...5.8.3.....2.....9......8.5..6...1.....6.24......78...51...6....4..9...4..7',
            '.....7.95.....1...86..2.....2..73..85......6...3..49..3.5...41724................',
            '.4.5.....8...9..3..76.2.....146..........9..7.....36....1..4.5..6......3..71..2..',
            '.834.........7..5...........4.1.8..........27...3.....2.6.5....5.....8........1..',
            '..9.....3.....9...7.....5.6..65..4.....3......28......3..75.6..6...........12.3.8',
            '.26.39......6....19.....7.......4..9.5....2....85.....3..2..9..4....762.........4',
            '2.3.8....8..7...........1...6.5.7...4......3....1............82.5....6...1.......',
            '6..3.2....1.....5..........7.26............843.........8.15........8.2........7..',
            '1.....9...64..1.7..7..4.......3.....3.89..5....7....2.....6.7.9.....4.1....129.3.',
            '.........9......84.623...5....6...453...1...6...9...7....1.....4.5..2....3.8....9',
            '.2....5938..5..46.94..6...8..2.3.....6..8.73.7..2.........4.38..7....6..........5',
            '9.4..5...25.6..1..31......8.7...9...4..26......147....7.......2...3..8.6.4.....9.',
            '...52.....9...3..4......7...1.....4..8..453..6...1...87.2........8....32.4..8..1.',
            '53..2.9...24.3..5...9..........1.827...7.........981.............64....91.2.5.43.',
            '1....786...7..8.1.8..2....9........24...1......9..5...6.8..........5.9.......93.4',
            '....5...11......7..6.....8......4.....9.1.3.....596.2..8..62..7..7......3.5.7.2..',
            '.47.2....8....1....3....9.2.....5...6..81..5.....4.....7....3.4...9...1.4..27.8..',
            '......94.....9...53....5.7..8.4..1..463...........7.8.8..7.....7......28.5.26....',
            '.2......6....41.....78....1......7....37.....6..412....1..74..5..8.5..7......39..',
            '1.....3.8.6.4..............2.3.1...........758.........7.5...6.....8.2...4.......',
            '2....1.9..1..3.7..9..8...2.......85..6.4.........7...3.2.3...6....5.....1.9...2.5',
            '..7..8.....6.2.3...3......9.1..5..6.....1.....7.9....2........4.83..4...26....51.',
            '...36....85.......9.4..8........68.........17..9..45...1.5...6.4....9..2.....3...',
            '34.6.......7.......2..8.57......5....7..1..2....4......36.2..1.......9.......7.82',
            '......4.18..2........6.7......8...6..4....3...1.......6......2..5..1....7...3....',
            '.4..5..67...1...4....2.....1..8..3........2...6...........4..5.3.....8..2........',
            '.......4...2..4..1.7..5..9...3..7....4..6....6..1..8...2....1..85.9...6.....8...3',
            '8..7....4.5....6............3.97...8....43..5....2.9....6......2...6...7.71..83.2',
            '.8...4.5....7..3............1..85...6.....2......4....3.26............417........',
            '....7..8...6...5...2...3.61.1...7..2..8..534.2..9.......2......58...6.3.4...1....',
            '......8.16..2........7.5......6...2..1....3...8.......2......7..4..8....5...3....',
            '.2..........6....3.74.8.........3..2.8..4..1.6..5.........1.78.5....9..........4.',
            '.52..68.......7.2.......6....48..9..2..41......1.....8..61..38.....9...63..6..1.9',
            '....1.78.5....9..........4..2..........6....3.74.8.........3..2.8..4..1.6..5.....',
            '1.......3.6.3..7...7...5..121.7...9...7........8.1..2....8.64....9.2..6....4.....',
            '4...7.1....19.46.5.....1......7....2..2.3....847..6....14...8.6.2....3..6...9....',
            '......8.17..2........5.6......7...5..1....3...8.......5......2..3..8....6...4....',
            '963......1....8......2.5....4.8......1....7......3..257......3...9.2.4.7......9..',
            '15.3......7..4.2....4.72.....8.........9..1.8.1..8.79......38...........6....7423',
            '..........5724...98....947...9..3...5..9..12...3.1.9...6....25....56.....7......6',
            '....75....1..2.....4...3...5.....3.2...8...1.......6.....1..48.2........7........',
            '6.....7.3.4.8.................5.4.8.7..2.....1.3.......2.....5.....7.9......1....',
            '....6...4..6.3....1..4..5.77.....8.5...8.....6.8....9...2.9....4....32....97..1..',
            '.32.....58..3.....9.428...1...4...39...6...5.....1.....2...67.8.....4....95....6.',
            '...5.3.......6.7..5.8....1636..2.......4.1.......3...567....2.8..4.7.......2..5..',
            '.5.3.7.4.1.........3.......5.8.3.61....8..5.9.6..1........4...6...6927....2...9..',
            '..5..8..18......9.......78....4.....64....9......53..2.6.........138..5....9.714.',
            '..........72.6.1....51...82.8...13..4.........37.9..1.....238..5.4..9.........79.',
            '...658.....4......12............96.7...3..5....2.8...3..19..8..3.6.....4....473..',
            '.2.3.......6..8.9.83.5........2...8.7.9..5........6..4.......1...1...4.22..7..8.9',
            '.5..9....1.....6.....3.8.....8.4...9514.......3....2..........4.8...6..77..15..6.',
            '.....2.......7...17..3...9.8..7......2.89.6...13..6....9..5.824.....891..........',
            '3...8.......7....51..............36...2..4....7...........6.13..452...........8..']

    total_time = -time.time()
    for i in range(len(hard)):
        print("====Problem" + str(i) + "====")
        g = Grid(hard[i])
        g.display()
        s = Solver(g)
        if s.solve():
            print("====Solution" + str(i) + "===")
            g.display()
        else:
            print("====No solution====")
    total_time += time.time()
    print("\n---total time:", total_time, "average: ", total_time / len(hard))

    # Solving hexadoku
    hard16 = [
        ".D4F.....856.03..5...D9..4.A62..A..1...0..2.54F...8.B...D.E.9.....9C.....D.4.E......7CB...F.......0D...A3B..F87.....2E...7...C.0.....4..C......B....F.E..0......D.7.91..E5......6.52A8..F.B.0..946..1..D.E8.3.....183B..5..........3..C.0....F.6B......2..9C8.A1",
        "3.8E....1..C.B.A.75.A..1.D.8..9....AE5B..0...6.26.9...34..F.....01..5.6..3..E.....2..1D0......4..4B.F..7.....9..85.C3...E2.9.....F..2...0.D1.37.....8.....7.D..B..4.............A..3.0..6.....84..ED6C9.B..08....9....8....2C43.........8..6A..D50..7....C..2.F.",
        "1D.B.....7.....6.35A.C.F..E....0...02.4..5..C18A4....BD..2......28..B....F..4...5.......6....8..D1A..2C.0.7.........A...48...E0C7.36.9..8..2A..........D.A...3.........65.C..0BD.2E.4.80......7F6.79.0....5F...1.5...D1.2.0C.B...C.....9.13....8...23A......5..."]

    total_time = -time.time()
    for i in range(len(hard16)):
        print("====Problem" + str(i) + "====")
        g = Grid(hard16[i])
        g.display()
        s = Solver(g)
        if s.solve():
            print("====Solution" + str(i) + "===")
            g.display()
        else:
            print("====No solution====")
    total_time += time.time()
    print("\n---total time:", total_time, "average: ", total_time / len(hard16))
